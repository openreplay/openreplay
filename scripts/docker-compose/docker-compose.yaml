version: '3'

services:
  postgresql:
    image: bitnami/postgresql:${POSTGRES_VERSION}
    container_name: postgres
    volumes:
      - pgdata:/bitnami/postgresql
    networks:
      - opereplay-net
    environment:
      POSTGRESQL_PASSWORD: ${COMMON_PG_PASSWORD}

  redis:
    image: bitnami/redis:${REDIS_VERSION}
    container_name: redis
    volumes:
      - redisdata:/var/lib/postgresql/data
    networks:
      - opereplay-net
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"

  minio:
    image: bitnami/minio:${MINIO_VERSION}
    container_name: minio
    volumes:
      - miniodata:/data
    networks:
      - opereplay-net
    ports:
      - 9001:9001
    environment:
      MINIO_ROOT_USER: ${COMMON_S3_KEY}
      MINIO_ROOT_PASSWORD: ${COMMON_S3_SECRET}

  fs-permission:
    image: debian:stable-slim
    container_name: fs-permission
    profiles:
      - "migration"
    volumes:
      - shared-volume:/mnt/efs
      - miniodata:/mnt/minio
      - pgdata:/mnt/postgres
    entrypoint:
      - /bin/bash
      - -c
      - |
        chown -R 1001:1001 /mnt/{efs,minio,postgres}

  minio-migration:
    image: bitnami/minio:2020.10.9-debian-10-r6
    container_name: minio-migration
    profiles:
      - "migration"
    depends_on:
      - minio
      - fs-permission
    networks:
      - opereplay-net
    volumes:
      - ../helmcharts/openreplay/files/minio.sh:/tmp/minio.sh
    environment:
      MINIO_HOST: http://minio:9000
      MINIO_ACCESS_KEY: ${COMMON_S3_KEY}
      MINIO_SECRET_KEY: ${COMMON_S3_SECRET}
    user: root
    entrypoint:
      - /bin/bash
      - -c
      - |
          apt update && apt install netcat -y
          # Wait for Minio to be ready
          until nc -z -v -w30 minio 9000; do
              echo "Waiting for Minio server to be ready..."
              sleep 1
          done
          bash /tmp/minio.sh init || exit 100

  db-migration:
    image: bitnami/postgresql:14.5.0 
    container_name: db-migration
    profiles:
      - "migration"
    depends_on:
      - postgresql
      - minio-migration
    networks:
      - opereplay-net
    volumes:
      - ../schema/db/init_dbs/postgresql/init_schema.sql:/tmp/init_schema.sql
    environment:
      PGHOST: postgresql
      PGPORT: 5432
      PGDATABASE: postgres
      PGUSER: postgres
      PGPASSWORD: ${COMMON_PG_PASSWORD}
    entrypoint:
      - /bin/bash
      - -c
      - |
          until PGPASSWORD=${COMMON_PG_PASSWORD} psql -h postgresql -U postgres -d postgres -c '\q'; do
          echo "PostgreSQL is unavailable - sleeping"
          sleep 1
          done
          echo "PostgreSQL is up - executing command"
          psql -v ON_ERROR_STOP=1 -f /tmp/init_schema.sql

  frontend-openreplay:
    image: public.ecr.aws/p1t3u8a3/frontend:v1.16.0
    container_name: frontend
    networks:
      - opereplay-net
    restart: unless-stopped

  alerts-openreplay:
    image: public.ecr.aws/p1t3u8a3/alerts:v1.16.0
    container_name: alerts
    networks:
      - opereplay-net
    env_file:
      - alerts.env
    restart: unless-stopped

  assets-openreplay:
    image: public.ecr.aws/p1t3u8a3/assets:v1.16.0
    container_name: assets
    networks:
      - opereplay-net
    env_file:
      - assets.env
    restart: unless-stopped

  assist-openreplay:
    image: public.ecr.aws/p1t3u8a3/assist:v1.16.0
    container_name: assist
    networks:
      - opereplay-net
    env_file:
      - assist.env
    restart: unless-stopped

  db-openreplay:
    image: public.ecr.aws/p1t3u8a3/db:v1.16.0
    container_name: db
    networks:
      - opereplay-net
    env_file:
      - db.env
    restart: unless-stopped

  ender-openreplay:
    image: public.ecr.aws/p1t3u8a3/ender:v1.16.0
    container_name: ender
    networks:
      - opereplay-net
    env_file:
      - ender.env
    restart: unless-stopped

  heuristics-openreplay:
    image: public.ecr.aws/p1t3u8a3/heuristics:v1.16.0
    domainname: app.svc.cluster.local
    container_name: heuristics
    networks:
      opereplay-net:
        aliases:
          - heuristics-openreplay.app.svc.cluster.local
    env_file:
      - heuristics.env
    restart: unless-stopped

  imagestorage-openreplay:
    image: public.ecr.aws/p1t3u8a3/imagestorage:v1.16.0
    container_name: imagestorage
    env_file:
      - imagestorage.env
    networks:
      - opereplay-net
    restart: unless-stopped

  integrations-openreplay:
    image: public.ecr.aws/p1t3u8a3/integrations:v1.16.0
    container_name: integrations
    networks:
      - opereplay-net
    env_file:
      - integrations.env
    restart: unless-stopped

  peers-openreplay:
    image: public.ecr.aws/p1t3u8a3/peers:v1.16.0
    container_name: peers
    networks:
      - opereplay-net
    env_file:
      - peers.env
    restart: unless-stopped

  sourcemapreader-openreplay:
    image: public.ecr.aws/p1t3u8a3/sourcemapreader:v1.16.0
    container_name: sourcemapreader
    networks:
      - opereplay-net
    env_file:
      - sourcemapreader.env
    restart: unless-stopped

  videostorage-openreplay:
    image: public.ecr.aws/p1t3u8a3/videostorage:v1.16.0
    container_name: videostorage
    networks:
      - opereplay-net
    env_file:
      - videostorage.env
    restart: unless-stopped

  http-openreplay:
    image: public.ecr.aws/p1t3u8a3/http:v1.16.0
    container_name: http
    networks:
      - opereplay-net
    env_file:
      - http.env
    restart: unless-stopped

  chalice-openreplay:
    image: public.ecr.aws/p1t3u8a3/chalice:v1.16.0
    container_name: chalice
    volumes:
      - shared-volume:/mnt/efs
    networks:
      - opereplay-net
    env_file:
      - chalice.env
    restart: unless-stopped

  sink-openreplay:
    image: public.ecr.aws/p1t3u8a3/sink:v1.16.0
    container_name: sink
    volumes:
      - shared-volume:/mnt/efs
    networks:
      - opereplay-net
    env_file:
      - sink.env
    restart: unless-stopped

  storage-openreplay:
    image: public.ecr.aws/p1t3u8a3/storage:v1.16.0
    container_name: storage
    volumes:
      - shared-volume:/mnt/efs
    networks:
      - opereplay-net
    env_file:
      - storage.env
    restart: unless-stopped

  nginx-openreplay:
    image: nginx:latest
    container_name: nginx
    networks:
      - opereplay-net
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped


  caddy:
    image: caddy:latest
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - opereplay-net
    env_file:
      - caddy.env
    restart: unless-stopped


volumes:
  pgdata:
  redisdata:
  miniodata:
  shared-volume:
  caddy_data:
  caddy_config:

networks:
  opereplay-net:
