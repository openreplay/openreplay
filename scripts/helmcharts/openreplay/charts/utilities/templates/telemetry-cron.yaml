{{- if .Values.global.enterpriseEditionLicense }}
{{- $kubeTargetVersion := .Capabilities.KubeVersion.GitVersion }}
{{- if semverCompare ">=1.22.0-0" $kubeTargetVersion }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: telemetry-cron
  namespace: {{ .Release.Namespace }}
spec:
  schedule: "{{ .Values.telemetry.cron }}"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0 # Don't restart the failed jobs
      template:
        metadata:
          {{- with .Values.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        spec:
          restartPolicy: Never
          containers:
          - name: telemetry-cron
            image: "{{ tpl .Values.telemetry.image.repository . }}:{{ .Values.telemetry.image.tag | default .Chart.AppVersion }}-ee"
            imagePullPolicy: {{ .Values.telemetry.image.pullPolicy }}
            env:
              {{- range $key, $val := .Values.global.env }}
              - name: {{ $key }}
                value: '{{ $val }}'
              {{- end }}
              - name: LICENSE_KEY
                {{- if .Values.global.existingsecret.name }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.global.existingsecret.name }}
                    key: enterpriseEditionLicense
                {{- else }}
                value: '{{ .Values.global.enterpriseEditionLicense }}'
                {{- end }}
              - name: version_number
                value: '{{ .Chart.AppVersion }}'
              - name: pg_host
                value: '{{ .Values.global.postgresql.postgresqlHost }}'
              - name: pg_port
                value: "5432"
              - name: pg_dbname
                value: "{{ .Values.global.postgresql.postgresqlDatabase }}"
              - name: pg_user
                value: '{{ .Values.global.postgresql.postgresqlUser }}'
              - name: pg_password
                {{- if .Values.global.postgresql.existingSecret }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.global.postgresql.existingSecret }}
                    key: postgresql-postgres-password
                {{- else }}
                value: '{{ .Values.global.postgresql.postgresqlPassword }}'
                {{- end}}
              - name: SITE_URL
                value: '{{- include "openreplay.domainURL" . }}'
              - name: S3_HOST
                value: '{{- include "openreplay.s3Endpoint" . }}'
              - name: S3_KEY
                {{- if .Values.global.s3.existingSecret }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.global.s3.existingSecret }}
                    key: access-key
                {{- else }}
                value: {{ .Values.global.s3.accessKey }}
                {{- end }}
              - name: S3_SECRET
                {{- if .Values.global.s3.existingSecret }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.global.s3.existingSecret }}
                    key: secret-key
                {{- else }}
                value: {{ .Values.global.s3.secretKey }}
                {{- end }}
              - name: AWS_DEFAULT_REGION
                value: '{{ .Values.global.s3.region }}'
              - name: sessions_region
                value: '{{ .Values.global.s3.region }}' 
              - name: sessions_bucket
                value: {{ .Values.global.s3.recordingsBucket }}
              - name: sourcemaps_bucket
                value: {{ .Values.global.s3.sourcemapsBucket }} 
              - name: js_cache_bucket
                value: {{ .Values.global.s3.assetsBucket }} 
              - name: EMAIL_HOST
                value: '{{ .Values.global.email.emailHost }}'
              - name: EMAIL_PORT
                value: '{{ .Values.global.email.emailPort }}'
              - name: EMAIL_USER
                value: '{{ .Values.global.email.emailUser }}'
              - name: EMAIL_PASSWORD
                {{- if .Values.global.email.existingSecret }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.global.email.existingSecret }}
                    key: email-password
                {{- else }}
                value: '{{ .Values.global.email.emailPassword }}'
                {{- end }}
              - name: EMAIL_USE_TLS
                value: '{{ .Values.global.email.emailUseTls }}'
              - name: EMAIL_USE_SSL
                value: '{{ .Values.global.email.emailUseSsl }}'
              - name: EMAIL_SSL_KEY
                {{- if .Values.global.email.existingSecret }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.global.email.existingSecret }}
                    key: email-ssl-key
                {{- else }}
                value: '{{ .Values.global.email.emailSslKey }}'
                {{- end }}
              - name: EMAIL_SSL_CERT
                {{- if .Values.global.email.existingSecret }}
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.global.email.existingSecret }}
                    key: email-ssl-cert
                {{- else }}
                value: '{{ .Values.global.email.emailSslCert }}'
                {{- end }}
              - name: EMAIL_FROM
                value: '{{ .Values.global.email.emailFrom }}'
              {{- range $key, $val := .Values.telemetry.env }}
              - name: {{ $key }}
                value: '{{ $val }}'
              {{- end}}
{{- end}}
