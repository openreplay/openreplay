# Default values for openreplay.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: "{{ .Values.global.openReplayContainerRegistry }}/video-replays"
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: "video-replays"
fullnameOverride: "video-replays-openreplay"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

securityContext:
  runAsUser: 1001
  runAsGroup: 1001
podSecurityContext:
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  fsGroupChangePolicy: "OnRootMismatch"
# podSecurityContext: {}
# fsGroup: 2000

# securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  ports:
    http: 8080
    metrics: 8888

serviceMonitor:
  enabled: true
  additionalLabels:
    release: observability
  scrapeConfigs:
    - port: metrics
      honorLabels: true
      interval: 15s
      path: /metrics
      scheme: http
      scrapeTimeout: 10s

ingress:
  enabled: true
  className: "{{ .Values.global.ingress.controller.ingressClassResource.name }}"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/cors-allow-methods: POST,GET,PATCH,DELETE
    nginx.ingress.kubernetes.io/cors-allow-headers: Content-Type,Authorization,Content-Encoding
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length"
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    secretName: openreplay-ssl

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

cloud: aws
aws:
  region: ""
  bucket_name: ""
env:
  SERVICE_NAME: video-replays
  TOPIC_VIDEO_REPLAY: video-replays
  GROUP_VIDEO_REPLAY: video-consumer
  SESSION_VIDEO_WIDTH: 1280
  SESSION_VIDEO_HEIGHT: 720
  SESSION_VIDEO_FPS: 30
  SESSION_VIDEO_SPEED: 1
  SESSION_VIDEO_MODE: video
  SESSION_VIDEO_OUTPUT_DIR: /mnt/efs/videos
  BATCH_JOB_QUEUE: replays
  BATCH_JOB_DEFINITION: replay_exporter:4
  BATCH_JOB_BASE_NAME: replay_exporter
  BATCH_RETRY_ATTEMPTS: 3
  PROJECT_EXPIRATION: 10m
  KAFKA_MAX_POLL_INTERVAL_MS: 300000

pvc:
  # This can be either persistentVolumeClaim or hostPath.
  # In case of pvc, you'll have to provide the pvc name.
  # For example
  # name: openreplay-efs
  name: "{{ .Values.global.pvcRWXName }}"
  hostMountPath: "{{ .Values.global.orTmpDir }}"

nodeSelector: {}

tolerations: []

affinity: {}

persistence: {}
  # # Spec of spec.template.spec.containers[*].volumeMounts
  # mounts:
  # - name: kafka-ssl
  #   mountPath: /opt/kafka/ssl
  # # Spec of spec.template.spec.volumes
  # volumes:
  # - name: kafka-ssl
  #   secret:
  #     secretName: kafka-ssl
