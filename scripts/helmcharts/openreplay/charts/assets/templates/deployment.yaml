apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "assets.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "assets.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "assets.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "assets.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "assets.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      shareProcessNamespace: true
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.global.enterpriseEditionLicense }}
          image: "{{ tpl .Values.image.repository . }}:{{ .Values.image.tag | default .Chart.AppVersion }}-ee"
          {{- else }}
          image: "{{ tpl .Values.image.repository . }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.healthCheck}}
          {{- .Values.healthCheck | toYaml | nindent 10}}
          {{- end}}
          env:
            {{- range $key, $val := .Values.env }}
            - name: {{ $key }}
              value: '{{ $val }}'
            {{- end}}
            {{- range $key, $val := .Values.global.env }}
            - name: {{ $key }}
              value: '{{ $val }}'
            {{- end }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef: {{- include "openreplay.secrets" (dict "key" "access-key" "ctx" .) | nindent 18 }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef: {{- include "openreplay.secrets" (dict "key" "secret-key" "ctx" .) | nindent 18 }}
            - name: BUCKET_NAME
              value: {{ .Values.global.s3.assetsBucket }}
            - name: LICENSE_KEY
              value: '{{ .Values.global.enterpriseEditionLicense }}'
            - name: AWS_ENDPOINT
              value: '{{- include "openreplay.s3Endpoint" . }}'
            - name: AWS_REGION
              value: '{{ .Values.global.s3.region }}'
            - name: KAFKA_SERVERS
              value: '{{ .Values.global.kafka.kafkaHost }}:{{ .Values.global.kafka.kafkaPort }}'
            - name: KAFKA_USE_SSL
              value: '{{ .Values.global.kafka.kafkaUseSsl }}'
            # We need to check what is the object store endpoint.
            # There can be 4 options
            # 1. Using minio inside kube clster
            # 2. Using minio managed external cluster, like aws minio offering
            # 3. Using GCP or other object stores compatible with s3 apis
            # 4. Using AWS itself.
            # AWS uses bucketname.endpoint/object while others use endpoint/bucketname/object
            - name: ASSETS_ORIGIN
              value: "{{ include "openreplay.assets_origin" . }}"
            {{- include "openreplay.env.redis_string" .Values.global.redis | nindent 12 }}
          ports:
            {{- range $key, $val := .Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $val }}
              protocol: TCP
            {{- end }}
          volumeMounts:
          {{- include "openreplay.volume.redis_ca_certificate.mount" .Values.global.redis | nindent 12 }}
          {{- with .Values.persistence.mounts  }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      {{- include "openreplay.volume.redis_ca_certificate" .Values.global.redis | nindent 8 }}
      {{- with .Values.persistence.volumes  }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
