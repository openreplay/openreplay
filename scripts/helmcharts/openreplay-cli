#!/bin/bash
# vim: set ft=sh:

OR_DIR="/var/lib/openreplay"
APP_NS="${APP_NS:-app}"
DB_NS="${DB_NS:-db}"
OR_REPO="https://github.com/openreplay/openreplay"
tmp_dir=$(mktemp -d)

[[ -d $OR_DIR ]] || {
  sudo mkdir $OR_DIR
}
export PATH=$PATH:/var/lib/openreplay

tools=(
  zyedidia/eget
  stern/stern
  derailed/k9s
  mikefarah/yq
  )

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Checking whether the app exists or we do have to upgade.
function exists() {
  which "${1}" &> /dev/null
  return $?
}

function err_cd() {
  cd "$1" &> /dev/null || (log err not able to cd to "$1" && exit 100)
}

function log () {
  case "$1" in
    info)
      shift
      echo -e "${GREEN}[INFO]" "$@" "${NC}"
      return
    ;;
    debug)
      shift
      echo -e "${YELLOW}[DEBUG]" "$@" "${NC}"
      return
    ;;
    err)
      shift
      echo -e "${RED}[INFO]" "$@" "${NC}"
      exit 100
    ;;
    *)
      echo "Not supported log format"
    ;;
  esac
  echo "[Error]" "$@"
  exit 100
}

function install_packages() {

  [[ -e "$OR_DIR/eget" ]] || {
    cd "$tmp_dir" || log err "Not able to cd to tmp dir $tmp_dir"
    curl --version &> /dev/null || log err "curl not found. Please install"
    curl https://zyedidia.github.io/eget.sh | sh
    sudo mv eget $OR_DIR
    err_cd -
  }

  for package in "${tools[@]}"; do
    log info Installing "$(awk -F/ '{print $2}' <<< $package)"
    sudo /var/lib/openreplay/eget -q --upgrade-only --to /var/lib/openreplay "$package"
  done
  sudo /var/lib/openreplay/eget -q --to "$OR_DIR" https://get.helm.sh/helm-v3.10.2-linux-amd64.tar.gz -f helm
  sudo /var/lib/openreplay/eget -q --to "$OR_DIR" https://dl.k8s.io/release/v1.20.0/bin/linux/amd64/kubectl
}

function help() {
  log debug 'USAGE: openreplay -p[ackages]
                          -u[pgrade]
                          -i[nstall]
                          -s[status]
                          -l[logs] [app name]
               App Names: alerts assets assist chalice 
                          db ender frontend heuristics 
                          http integrations nginx-controller 
                          peers sink sourcemapreader storage 
    '
  return
}

function status() {
  log info OpenReplay Version
  # awk '(NR<2)' < "$OR_DIR/vars.yaml"
  awk '/fromVersion/{print $2}' < "${OR_DIR}/vars.yaml"
  log info Disk Status
  df -h /var
  log info Memory Status
  free -mh
  log info CPU Status
  uname -a
  # Print only the fist line.
  awk '(NR<2)' < /etc/os-release 
  echo "CPU Count: $(nproc)"
  log info Kubernetes Status
  kubectl version --short
  log info Openreplay Component Status
  kubectl get po -n "${APP_NS}"
  kubectl get po -n "${DB_NS}"
  return
}

function or_helm_upgrade() {
  if ! helm upgrade --install openreplay ./openreplay -n $APP_NS --wait -f ./vars.yaml --atomic --debug; then
    log err '
      Installation failed.
      You can check the status using
      openreplay -s
      If any pods are in failed state, please 
      openreplay -l <pod-name>
      '
  fi

}

function upgrade() {
  # TODO:
  # 1. store vars.yaml in central place.
  # 3. In upgrade you'll have to clone the repo
  # TODO: yq merge yaml
  exists git || log err "Git not found. Please install"
  log info "Working directory $tmp_dir"
  err_cd "$tmp_dir"
  or_version=$(awk '/fromVersion/{print $2}' < "${OR_DIR}/vars.yaml")
  [[ -d "$OR_DIR/openreplay" ]] && sudo cp -b "$OR_DIR/openreplay" "$OR_DIR/openreplay_${or_version//\"}" && sudo rm -rf ${OR_DIR}/openreplay
  git clone "${OR_REPO}"
  err_cd openreplay/scripts/helmcharts
  install_packages
  [[ -d /openreplay ]] && sudo chown -R 1001:1001 /openreplay

  # Merge prefrerences
  cp $OR_DIR/vars.yaml old_vars.yaml
  yq '(load("old_vars.yaml") | .. | select(tag != "!!map" and tag != "!!seq")) as $i ireduce(.; setpath($i | path; $i))' vars.yaml > new_vars.yaml
  mv new_vars.yaml vars.yaml
  or_helm_upgrade

  sudo mv ./openreplay-cli /bin/
  sudo mv ./vars.yaml "$OR_DIR"
  log info All the configuration has been stored to $OR_DIR/vars.yaml file

  err_cd -
}

# Ref: https://stackoverflow.com/questions/16483119/an-example-of-how-to-use-getopts-in-bash
while getopts piuhsl: flag
do
  case "$flag" in
    p)
      log info "Installing Packages"
      install_packages
      exit 0
    ;;
    i)
      log info "Installing OpenReplay"
      sudo cp -f ./openreplay /bin/
      read -rp "Enter your domain name(openreplay.mycompany.com): " domain_name
      DOMAIN_NAME=$domain_name bash init.sh
      sudo cp -f ./vars.yaml "$OR_DIR"
      exit 0
    ;;
    u)
      log info "Upgrading OpenReplay"
      upgrade
      log info Cleaning temporary directory
      [[ -z $SKIP_DELETE_TMP_DIR ]] && rm -rf "${tmp_dir}"
      exit 0
    ;;
    l)
      # Skipping double quotes because we want globbing. For example
      # ./openreplay -l "chalice --tail 10"
      stern -n "${LOG_NS:-$APP_NS}" ${OPTARG}
      exit 0
    ;;
    s)
      log info "Checking OpenReplay Components Status\n"
      status
      exit 0
    ;;
    h|*)
      help
      exit 0
    ;;
  esac
done
shift $((OPTIND-1))

[ $# -eq 0 ] && help
