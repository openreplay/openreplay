###################
## Mandatory Fields.
###################

# Give the path of the kubeconfig_path: /home/user/.kube/config
# we can access the kubernetes cluster.
# Give absolute file path.
# Use following command to get the full file path
# `readlink -f <file>`
kubeconfig_path: "{{ kubeconfig_path }}"

# Using which domain name, you'll be accessing OpenReplay
# for example: domain_name: "openreplay.mycompany.com"
#
# Without domain name session replay is not possible, because we've to
# create signed url for s3 objects.
domain_name: "{{ domain_name }}"

###################
## Optional Fields.
###################

# If you've private registry, please update the details here.
docker_registry_username: "{{ docker_registry_username }}"
docker_registry_password: "{{ docker_registry_password }}"
docker_registry_url: "{{ docker_registry_url }}"
image_tag: "v1.3.0"
openreplay_version: "v1.3.0"

# Nginx ssl certificates.
# in cert format
# Give absolute file path.
# Use following command to get the full file path
# `readlink -f <file>`
# For example:
# nginx_ssl_cert_file_path: "/home/openreplay/nginx-cert.crt"
# nginx_ssl_key_file_path: "/home/openreplay/nginx-key.pem"
#
# By Default, we'll create a self signed certificate for nginx, and populate the values here.
# Once you've proper domain name, and ssl certificate
# Change the following variables accordingly.
nginx_ssl_cert_file_path: "{{ nginx_ssl_cert_file_path }}"
nginx_ssl_key_file_path: "{{ nginx_ssl_key_file_path }}"

# This key is used to create password for chalice api requests.
# Create a strong password.
# By default, a default key will be generated and will update the value here.
jwt_secret_key: "{{ jwt_secret_key }}"

# Random password for minio,
# If not defined, will generate at runtime.
# Use following command to generate password
# `openssl rand -base64 30`
minio_access_key: "{{ minio_access_key }}"
minio_secret_key: "{{ minio_secret_key }}"

# If you're using enterprise edition.
# Insert the enterprise_edition_License key which you got.
enterprise_edition_license: "{{ enterprise_edition_license }}"

# Enable monitoring
# If set, monitoring stack will be installed
# including, prometheus, grafana and other core components,
# to scrape the metrics. But this will cost, additional resources (cpu and memory).
# Monitoring won't be installed on base installation.
enable_monitoring: "{{ enable_monitoring }}"
# Password for grafana.
# If password is not given, it'll be generated, and updated here.
#
# Use following command to generate password 
# `openssl rand -base64 30`
#
# Username: admin
grafana_password: "{{ grafana_password }}"

## Advanced
# If you need to override the default cpu/memory allocation of databases.
db_resource_override:
  postgresql: {{ db_resource_override.postgresql|default({}) }}
    # resources:
    #   limits:
    #     cpu: 1000m
    #     memory: 1024Mi
    #   requests:
    #     cpu: 250m
    #     memory: 256Mi
  redis: {{ db_resource_override.redis|default({}) }}
  clickhouse: {{ db_resource_override.clickhouse|default({}) }}

## Sane defaults
s3_endpoint: "{{ s3_endpoint }}"
aws_region: "{{ aws_region }}"
kafka_endpoint: "{{ kafka_endpoint }}"
kafka_ssl: "{{ kafka_ssl }}"
postgres_endpoint: "{{ postgres_endpoint }}"
postgres_port: "{{ postgres_port }}"
postgres_db_name: "{{ postgres_db_name }}"
postgres_db_user: "{{ postgres_db_user }}"
postgres_db_password: "{{ postgres_db_password }}"
redis_endpoint: "{{ redis_endpoint }}"
email_host: "{{ email_host }}"
email_port: "{{ email_port }}"
email_user: "{{ email_user }}"
email_password: "{{ email_password }}"
email_use_tls: "{{ email_use_tls }}"
email_use_ssl: "{{ email_use_ssl }}"
email_ssl_key: "{{ email_ssl_key }}"
email_ssl_cert: "{{ email_ssl_cert }}"
email_from: "{{ email_from }}"
